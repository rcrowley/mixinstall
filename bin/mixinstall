#!/usr/bin/env php
<?php

#
# Mixinstall
# Richard Crowley <r@rcrowley.org>
#

switch (@$argv[1]) {

	# mixinstall init|clone <project> <repository> [<base>]
	case 'init':
	case 'clone':
		$base = '';
		switch (sizeof($argv)) {
			case 5:
				$base = $argv[4];
			case 4:
				$project = $argv[2];
				$repository = $argv[3];
			break;
			default:
				die("[mixinstall] bad arguments\n");
		}
		mixinstall_init($project, 'git', $repository, $base);
		if ('clone' == $argv[1]) { mixinstall_update($project); }
	break;

	# mixinstall update|up [<project>]
	case 'update':
	case 'up':
		switch (sizeof($argv)) {
			case 3:
				mixinstall_update($argv[2]);
			break;
			case 2:
				mixinstall_update();
			break;
			default:
				die("[mixinstall] bad arguments\n");
		}
	break;

	# mixinstall remove|rm <project>
	case 'remove':
	case 'rm':
		if (3 != sizeof($argv)) {
			die("[mixinstall] you have to give a project to remove\n");
		}
		mixinstall_remove($argv[2]);
	break;

	# mixinstall list|ls
	case 'list':
	case 'ls':
		mixinstall_list();
	break;

	default:
		die("[mixinstall] unknown command {$argv[1]}\n");
}



function mixinstall_init($project, $scm, $repository, $base) {
	if (parse_mixinstall($project)) {
		die("[mixinstall] project $project already exists\n");
	}
	$base = substr(realpath($base), 1 + strlen(git_root()));
	write_mixinstall($project, $scm, $repository, $base);
	write_gitignore($project, array());
}

function mixinstall_update($project = false) {
	if ($project) {
		$repo = parse_mixinstall($project);
		if (!$repo) {
			die("[mixinstall] project $project doesn't exist\n");
		}
		$projects = array($project => $repo);
	} else {
		$projects = parse_mixinstall();
		if (!$projects) {
			die("[mixinstall] no projects\n");
		}
	}
	foreach ($projects as $project => $tmp) {
		list($scm, $repo, $base) = $tmp;
		if ($base) { $base .= '/'; }

		# Checkout the project and create a list of files to be mixed
		switch ($scm) {
			case 'git':
				passthru("git clone $repo /tmp/$project", $status);
				if ($status) {
					echo "[mixinstall] git-clone returned $status\n";
					passthru("rm -rf /tmp/$project");
					continue;
				}
				$new_files = array();
				foreach (flatten(rscandir("/tmp/$project")) as $f) {
					if ('.git' == substr($f, 0, 4)) { continue; }
					if ('README' == $f) { continue; }
					$new_files[] = $f;
				}
			break;
			default:
				echo "[mixinstall] $scm is not supported\n";
				continue;
		}

		# Check that we won't overwrite any files outside of the mixinstall
		#   Tsk tsk this is O(n^2)
		$old_files = parse_gitignore($project);
		if (!is_array($old_files)) { $old_files = array(); }
		$dirty = false;
		foreach ($new_files as $f) {
			if (!in_array("$base$f", $old_files) && file_exists("$base$f")) {
				echo "[mixinstall] $base$f exists and is not a mixed file\n";
				$dirty = true;
			}
		}
		if ($dirty) {
			passthru("rm -rf /tmp/$project");
			continue;
		}

		# Mix the files
		$files = array();
		foreach ($new_files as $f) {
			@mkdir(dirname("$base$f"), 0755, true);
			if (!rename("/tmp/$project/$f", "$base$f")) {
				echo "[mixinstall] error renaming ",
					"/tmp/$project/$f to $base$f\n";
			}
			$files[] = "$base$f";
		}
		write_gitignore($project, $files);

		passthru("rm -rf /tmp/$project");
	}
}

function mixinstall_remove($project) {
	$files = parse_gitignore($project);
	# TODO: Remove everything in $files
	write_mixinstall($project, false);
	write_gitignore($project, false);
}

function mixinstall_list() {
	$projects = parse_mixinstall();
	if (!is_array($projects)) { $projects = array(); }
	foreach ($projects as $project => $tmp) {
		list($scm, $repo, $base) = $tmp;
		echo "$project at ./$base\n\t$repo ($scm)\n";
	}
}



function write_mixinstall($project, $scm, $repository = false, $base = false) {
	if (!$project) { return false; }
	$file = git_root() . '/.mixinstall';
	if (file_exists($file) && !is_writable($file)) { return false; }
	$projects = parse_mixinstall();
	if (!is_array($projects)) { $projects = array(); }
	if ($scm) { $projects[$project] = array($scm, $repository, $base); }
	else { unset($projects[$project]); }
	$fp = fopen($file, 'w');
	if (!$fp) { return false; }
	foreach ($projects as $proj => $tmp) {
		list($scm, $repo, $base) = $tmp;
		fwrite($fp, "$proj $scm $repo $base\n"); }
	fclose($fp);
	return true;
}

function write_gitignore($project, $files) {
	if (!$project) { return false; }
	$file = git_root() . '/.gitignore';
	if (file_exists($file) && !is_writable($file)) { return false; }
	$projects = parse_gitignore();
	if (!is_array($projects)) { $projects = array(); }
	if (is_array($files)) { $projects[$project] = $files; }
	else { unset($projects[$project]); }
	$fp = fopen($file, 'w');
	if (!$fp) { return false; }
	if (isset($projects[''])) {
		foreach ($projects[''] as $f) { fwrite($fp, "$f\n"); }
		unset($projects['']);
	}
	foreach ($projects as $proj => $files) {
		fwrite($fp, "\n#### Mixed project: $proj ####\n");
		foreach ($files as $f) { fwrite($fp, "$f\n"); }
		fwrite($fp, "####\n");
	}
	fclose($fp);
	return true;
}

function parse_mixinstall($project = false) {
	$file = git_root() . '/.mixinstall';
	if (!is_readable($file)) { return false; }
	$lines = explode("\n", file_get_contents($file));
	$projects = array();
	foreach ($lines as $line) {
		if (!$line) { continue; }
		list($proj, $scm, $repo, $base) = explode(' ', $line);
		$projects[$proj] = array($scm, $repo, $base);
	}
	if ($project) {
		return isset($projects[$project]) ? $projects[$project] : false;
	} else { return $projects; }
}

function parse_gitignore($project = false) {
	$file = git_root() . '/.gitignore';
	if (!is_readable($file)) { return false; }
	$lines = explode("\n", file_get_contents($file));
	$projects = array();
	$proj = false;
	foreach ($lines as $line) {
		if (!$line) { continue; }
		if (preg_match('!^#### Mixed project: (\S+) ####$!', $line, $m)) {
			$proj = $m[1];
			$projects[$proj] = array();
		} else if (preg_match('!^####$!', $line)) { $proj = false; }
		else if ($proj) { $projects[$proj][] = $line; }
		else { $projects[''][] = $line; }
	}
	if ($project) {
		return isset($projects[$project]) ? $projects[$project] : false;
	} else { return $projects; }
}

# TODO: What if there's no .git in any parent?
function git_root() {
	$dir = realpath(getcwd());
	while (!is_dir("$dir/.git")) { $dir = dirname($dir); }
	return realpath($dir);
}

function rscandir($dir) {
	$files = scandir($dir);
	$out = array();
	foreach ($files as $f) {
		if ('.' == $f || '..' == $f) { continue; }
		$out[$f] = is_dir("$dir/$f") ? rscandir("$dir/$f") : false;
	}
	return $out;
}

# Flatten a tree into a one-dimensional list
function flatten($tree, $delim = '/') {
	$out = array();
	foreach ($tree as $k => $v) {
		if (is_array($v)) {
			$subtree = flatten($v, $delim);
			foreach ($subtree as $v) { $out[] = "$k$delim$v"; }
		} else { $out[] = $k; }
	}
	return $out;
}
