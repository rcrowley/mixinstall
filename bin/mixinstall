#!/usr/bin/env php
<?php

#
# Mixinstall
# Richard Crowley <r@rcrowley.org>
#

switch (@$argv[1]) {

	# mixinstall init|clone <project> <repository> [<base>]
	case 'init':
	case 'clone':
		$base = '';
		switch (sizeof($argv)) {
			case 5:
				$base = $argv[4];
			case 4:
				$project = $argv[2];
				$repository = $argv[3];
			break;
			default:
				die("[mixinstall] bad arguments\n");
		}
		mixinstall_init($project, $repository, $base);
		if ('clone' == $argv[1]) { mixinstall_update($project); }
	break;

	# mixinstall update|up [<project>]
	case 'update':
	case 'up':
		switch (sizeof($argv)) {
			case 3:
				mixinstall_update($argv[2]);
			break;
			case 2:
				mixinstall_update();
			break;
			default:
				die("[mixinstall] bad arguments\n");
		}
	break;

	# mixinstall remove|rm <project>
	case 'remove':
	case 'rm':
		if (3 != sizeof($argv)) {
			die("[mixinstall] you have to give a project to remove\n");
		}
		mixinstall_remove($argv[2]);
	break;

	default:
		die("[mixinstall] unknown command {$argv[1]}\n");
}



function mixinstall_init($project, $repository, $base = '') {
	if (parse_mixinstall($project)) {
		die("[mixinstall] project $project already exists\n");
	}
	$base = substr(realpath($base), 1 + strlen(git_root()));
	write_mixinstall($project, $repository, $base);
	write_gitignore($project, array());
}

function mixinstall_update($project = false) {
	if ($project) {
		$repo = parse_mixinstall($project);
		if (!$repo) {
			die("[mixinstall] project $project doesn't exist\n");
		}
		$projects = array($project => $repo);
	} else {
		$projects = parse_mixinstall();
		if (!$projects) {
			die("[mixinstall] no projects\n");
		}
	}
	foreach ($projects as $project => $tmp) {
		list($repo, $base) = $tmp;
		# TODO: Actually update $repository
	}
}

function mixinstall_remove($project) {
	$files = parse_gitignore($project);
	# TODO: Remove everything in $files
	write_mixinstall($project, false);
	write_gitignore($project, false);
}



function write_mixinstall($project, $repository, $base = '') {
	if (!$project) { return false; }
	$file = git_root() . '/.mixinstall';
	if (file_exists($file) && !is_writable($file)) { return false; }
	$projects = parse_mixinstall();
	if (!is_array($projects)) { $projects = array(); }
	if ($repository) { $projects[$project] = array($repository, $base); }
	else { unset($projects[$project]); }
	$fp = fopen($file, 'w');
	if (!$fp) { return false; }
	foreach ($projects as $proj => $tmp) {
		list($repo, $base) = $tmp;
		fwrite($fp, "$proj $repo $base\n"); }
	fclose($fp);
	return true;
}

function write_gitignore($project, $files) {
	if (!$project) { return false; }
	$file = git_root() . '/.gitignore';
	if (file_exists($file) && !is_writable($file)) { return false; }
	$projects = parse_gitignore();
	if (!is_array($projects)) { $projects = array(); }
	if (is_array($files)) { $projects[$project] = $files; }
	else { unset($projects[$project]); }
	$fp = fopen($file, 'w');
	if (!$fp) { return false; }
	if (isset($projects[''])) {
		foreach ($projects[''] as $f) { fwrite($fp, "$f\n"); }
		unset($projects['']);
	}
	foreach ($projects as $proj => $files) {
		fwrite($fp, "\n#### Mixed project: $proj ####\n");
		foreach ($files as $f) { fwrite($fp, "$f\n"); }
		fwrite($fp, "####\n");
	}
	fclose($fp);
	return true;
}

function parse_mixinstall($project = false) {
	$file = git_root() . '/.mixinstall';
	if (!is_readable($file)) { return false; }
	$lines = explode("\n", file_get_contents($file));
	$projects = array();
	foreach ($lines as $line) {
		if (!$line) { continue; }
		list($proj, $repo, $base) = explode(' ', $line);
		$projects[$proj] = array($repo, $base);
	}
	if ($project) {
		return isset($projects[$project]) ? $projects[$project] : false;
	} else { return $projects; }
}

function parse_gitignore($project = false) {
	$file = git_root() . '/.gitignore';
	if (!is_readable($file)) { return false; }
	$lines = explode("\n", file_get_contents($file));
	$projects = array();
	$proj = false;
	foreach ($lines as $line) {
		if (!$line) { continue; }
		if (preg_match('!^#### Mixed project: (\S+) ####$!', $line, $m)) {
			$proj = $m[1];
			$projects[$proj] = array();
		} else if (preg_match('!^####$!', $line)) { $proj = false; }
		else if ($proj) { $projects[$proj][] = $line; }
		else { $projects[''][] = $line; }
	}
	if ($project) {
		return isset($projects[$project]) ? $projects[$project] : false;
	} else { return $projects; }
}

# TODO: What if there's no .git in any parent?
function git_root() {
	$dir = realpath(getcwd());
	while (!is_dir("$dir/.git")) { $dir = dirname($dir); }
	return realpath($dir);
}
